-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Oct 15, 2019 at 09:21 AM
-- Server version: 10.3.16-MariaDB
-- PHP Version: 7.3.7

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `cms1`
--

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `created_at`, `updated_at`, `name`) VALUES
(1, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'ARRAY'),
(2, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'TREE'),
(3, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'GRAPH'),
(4, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'OPERATING SYSTEM'),
(6, '2019-10-14 23:24:29', '2019-10-14 23:24:29', 'STACK'),
(7, '2019-10-14 23:24:40', '2019-10-14 23:24:40', 'QUEUE'),
(8, '2019-10-14 23:25:06', '2019-10-14 23:25:06', 'LINKED LIST');

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(50, '2014_10_12_000000_create_users_table', 1),
(51, '2014_10_12_100000_create_password_resets_table', 1),
(52, '2019_08_31_183018_create_posts_table', 1),
(53, '2019_08_31_183505_create_categories_table', 1),
(54, '2019_09_01_183601_add_soft_delete_to_posts_table', 1),
(55, '2019_09_05_205309_create_tags_table', 1),
(56, '2019_09_06_192753_create_post_tag_table', 1);

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `category_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `published_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `created_at`, `updated_at`, `title`, `description`, `content`, `image`, `category_id`, `user_id`, `published_at`, `deleted_at`) VALUES
(1, '2019-10-14 13:57:43', '2019-10-14 22:02:25', 'Arrays in C/C++', 'An array is a collection of items stored at contiguous memory locations.', '<div>Why do we need arrays? We can use normal variables (v1, v2, v3, ..) when we have a small number of objects, but if we want to store a large number of instances, it becomes difficult to manage them with normal variables. The idea of an array is to represent many instances in one variable. Array declaration in C/C++: 1. Array declaration by specifying size // Array declaration by initializing elements int arr[] = { 10, 20, 30, 40 } // Compiler creates an array of size 4. // above is same as \"int arr[4] = {10, 20, 30, 40}\"&nbsp;</div>', 'storage/posts/array.png', 1, 2, '2019-10-13 18:30:00', NULL),
(2, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'Binary Tree Data Structure', 'A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child.', '1) The maximum number of nodes at level ‘l’ of a binary tree is 2l-1.\n            Here level is number of nodes on path from root to the node (including root and node). Level of root is 1.\n            This can be proved by induction.\n            For root, l = 1, number of nodes = 21-1 = 1\n            Assume that maximum number of nodes on level l is 2l-1\n            Since in Binary tree every node has at most 2 children, next level would have twice nodes, i.e. 2 * 2l-1\n            \n             \n            2) Maximum number of nodes in a binary tree of height ‘h’ is 2h – 1.\n            Here height of a tree is maximum number of nodes on root to leaf path. Height of a tree with single node is considered as 1.\n            This result can be derived from point 2 above. A tree has maximum nodes if all levels have maximum nodes. So maximum number of nodes in a binary tree of height h is 1 + 2 + 4 + .. + 2h-1. This is a simple geometric series with h terms and sum of this series is 2h – 1.\n            In some books, height of the root is considered as 0. In this convention, the above formula becomes 2h+1 – 1\n            \n            \n            \n             \n            \n             \n            3) In a Binary Tree with N nodes, minimum possible height or minimum number of levels is  ? Log2(N+1) ?  \n            This can be directly derived from point 2 above. If we consider the convention where height of a leaf node is considered as 0, then above formula for minimum possible height becomes   ? Log2(N+1) ? – 1\n            \n             \n            4) A Binary Tree with L leaves has at least   ? Log2L ? + 1   levels\n            A Binary tree has maximum number of leaves (and minimum number of levels) when all levels are fully filled. Let all leaves be at level l, then below is true for number of leaves L.', 'storage/posts/tree.png', 2, 3, '2019-10-13 18:30:00', NULL),
(3, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'Graph Data Structure And Algorithms', 'A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices and the edges are lines or arcs that connect any two nodes in the graph.', 'Graphs are used to solve many real-life problems. Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network. Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with a vertex(or node). Each node is a structure and contains information like person id, name, gender, locale etc.', 'storage/posts/graph.png', 3, 3, '2019-10-13 18:30:00', NULL),
(4, '2019-10-14 13:57:43', '2019-10-14 13:57:43', 'Banker’s Algorithm', 'The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety', 'The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety by simulating the allocation for predetermined maximum possible amounts of all resources,\n             then makes an “s-state” check to test for possible activities, before deciding whether allocation should be allowed to continue.\n\n            Following Data structures are used to implement the Banker’s Algorithm:\n            \n            Let ‘n’ be the number of processes in the system and ‘m’ be the number of resources types.\n            \n            Available : \n            \n            It is a 1-d array of size ‘m’ indicating the number of available resources of each type.\n            Available[ j ] = k means there are ‘k’ instances of resource type Rj\n            Max :\n            \n            It is a 2-d array of size ‘n*m’ that defines the maximum demand of each process in a system.\n            Max[ i, j ] = k means process Pi may request at most ‘k’ instances of resource type Rj.\n            Allocation :\n            \n            It is a 2-d array of size ‘n*m’ that defines the number of resources of each type currently allocated to each process.\n            Allocation[ i, j ] = k means process Pi is currently allocated ‘k’ instances of resource type Rj\n            Need :\n            \n             It is a 2-d array of size ‘n*m’ that indicates the remaining resource need of each process.\n            Need [ i,   j ] = k means process Pi currently need ‘k’ instances of resource type Rj\n            for its execution.\n            \n            Need [ i,   j ] = Max [ i,   j ] – Allocation [ i,   j ]\n            \n            \n             \n            \n            Allocationi specifies the resources currently allocated to process Pi and Needi specifies the additional resources that process Pi may still request to complete its task.\n            \n            Banker’s algorithm consists of Safety algorithm and Resource request algorithm\n            \n            ', 'storage/posts/banker.png', 4, 2, '2019-10-13 18:30:00', NULL),
(5, '2019-10-14 23:23:34', '2019-10-14 23:23:34', 'Heap Data Structure', 'A Heap is a special Tree-based data structure in which the tree is a complete binary tree.', '<div>A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types:<br><br></div><ol><li><strong>Max-Heap</strong>: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.</li><li><strong>Min-Heap</strong>: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.</li><li>sub-trees in that Binary Tree.</li></ol><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:599,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/MinHeapAndMaxHeap.png&quot;,&quot;width&quot;:1000}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/MinHeapAndMaxHeap.png\" width=\"1000\" height=\"599\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div><strong>Applications of Heaps:</strong><br><strong>1)</strong> <a href=\"http://quiz.geeksforgeeks.org/heap-sort/\">Heap Sort</a>: Heap Sort uses Binary Heap to sort an array in O(nLogn) time.<br><br></div><div><strong>2)</strong> Priority Queue: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently.<br><br></div><div><strong>3) </strong>Graph Algorithms: The priority queues are especially used in Graph Algorithms like <a href=\"https://www.geeksforgeeks.org/greedy-algorithms-set-7-dijkstras-algorithm-for-adjacency-list-representation/\">Dijkstra’s Shortest Path</a> and<a href=\"https://www.geeksforgeeks.org/greedy-algorithms-set-5-prims-minimum-spanning-tree-mst-2/\"> Prim’s Minimum Spanning Tree</a>.<br><br></div><div><strong>4)</strong> Many problems can be efficiently solved using Heaps. See following for example.<br>a) <a href=\"https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/\">K’th Largest Element in an array</a>.<br>b) <a href=\"https://www.geeksforgeeks.org/nearly-sorted-algorithm/\">Sort an almost sorted array/</a><br>c) <a href=\"https://www.geeksforgeeks.org/merge-k-sorted-arrays/\">Merge K Sorted Arrays</a>.<br><br></div><div><strong>Operations on Min Heap:</strong><br><strong>1)</strong> getMini(): It returns the root element of Min Heap. Time Complexity of this operation is O(1).<br><br></div><div><strong>2)</strong> extractMin(): Removes the minimum element from MinHeap. Time Complexity of this Operation is O(Logn) as this operation needs to maintain the heap property (by calling heapify()) after removing root.<br><br></div><div><strong>3)</strong> decreaseKey(): Decreases value of key. The time complexity of this operation is O(Logn). If the decreases key value of a node is greater than the parent of the node, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.<br><br></div><div><strong>4) </strong>insert(): Inserting a new key takes O(Logn) time. We add a new key at the end of the tree. IF new key is greater than its parent, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property.<br><br></div><div><strong>5)</strong> delete(): Deleting a key also takes O(Logn) time. We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove the key.<br><br></div>', 'storage/posts/1571115214heap.png', 2, 1, '2019-10-14 18:30:00', NULL),
(6, '2019-10-14 23:32:52', '2019-10-14 23:32:52', 'Stack Data Structure', 'Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).', '<div>Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).<br><br></div><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:258,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/stack.png&quot;,&quot;width&quot;:748}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/stack.png\" width=\"748\" height=\"258\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>There are many real-life examples of a stack. Consider an example of plates stacked over one another in the canteen. The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow LIFO(Last In First Out)/FILO(First In Last Out) order.<br><br></div><h1>Iterative Postorder Traversal | Set 1 (Using Two Stacks)</h1><div>We have discussed <a href=\"https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/\">iterative inorder</a> and <a href=\"https://www.geeksforgeeks.org/iterative-preorder-traversal/\">iterative preorder</a> traversals. In this post, iterative postorder traversal is discussed, which is more complex than the other two traversals (due to its nature of non-<a href=\"http://en.wikipedia.org/wiki/Tail_call\">tail recursion</a>, there is an extra statement after the final recursive call to itself). Postorder traversal can easily be done using two stacks, though. The idea is to push reverse postorder traversal to a stack. Once we have the reversed postorder traversal in a stack, we can just pop all items one by one from the stack and print them; this order of printing will be in postorder because of the LIFO property of stacks. Now the question is, how to get reversed postorder elements in a stack – the second stack is used for this purpose. For example, in the following tree, we need to get 1, 3, 7, 6, 2, 5, 4 in a stack. If take a closer look at this sequence, we can observe that this sequence is very similar to the preorder traversal. The only difference is that the right child is visited before left child, and therefore the sequence is “root right left” instead of “root left right”. So, we can do something like <a href=\"https://www.geeksforgeeks.org/iterative-preorder-traversal/\">iterative preorder traversal</a> with the following differences:<br>a) Instead of printing an item, we push it to a stack.<br>b) We push the left subtree before the right subtree.<br><br></div><div>Following is the complete algorithm. After step 2, we get the reverse of a postorder traversal in the second stack. We use the first stack to get the correct order.<br><br></div><pre>1. Push root to first stack.\r\n2. Loop while first stack is not empty\r\n   2.1 Pop a node from first stack and push it to second stack\r\n   2.2 Push left and right children of the popped node to first stack\r\n3. Print contents of second stack</pre><div>Let us consider the following tree<br><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:349,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTree.png&quot;,&quot;width&quot;:638}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTree.png\" width=\"638\" height=\"349\"><figcaption class=\"attachment__caption\"></figcaption></figure>Following are the steps to print postorder traversal of the above tree using two stacks.<br><br></div><pre>1. Push 1 to first stack.\r\n      First stack: 1\r\n      Second stack: Empty\r\n\r\n2. Pop 1 from first stack and push it to second stack. \r\n   Push left and right children of 1 to first stack\r\n      First stack: 2, 3\r\n      Second stack: 1\r\n\r\n3. Pop 3 from first stack and push it to second stack. \r\n   Push left and right children of 3 to first stack\r\n      First stack: 2, 6, 7\r\n      Second stack: 1, 3\r\n\r\n4. Pop 7 from first stack and push it to second stack.\r\n      First stack: 2, 6\r\n      Second stack: 1, 3, 7\r\n\r\n5. Pop 6 from first stack and push it to second stack.\r\n      First stack: 2\r\n      Second stack: 1, 3, 7, 6\r\n\r\n6. Pop 2 from first stack and push it to second stack. \r\n   Push left and right children of 2 to first stack\r\n      First stack: 4, 5\r\n      Second stack: 1, 3, 7, 6, 2\r\n\r\n7. Pop 5 from first stack and push it to second stack.\r\n      First stack: 4\r\n      Second stack: 1, 3, 7, 6, 2, 5\r\n\r\n8. Pop 4 from first stack and push it to second stack.\r\n      First stack: Empty\r\n      Second stack: 1, 3, 7, 6, 2, 5, 4\r\n\r\nThe algorithm stops here since there are no more items in the first stack. \r\nObserve that the contents of second stack are in postorder fashion. Print them. </pre><h1>Iterative Postorder Traversal | Set 2 (Using One Stack)</h1><div>We have discussed a simple <a href=\"https://www.geeksforgeeks.org/iterative-postorder-traversal/\">iterative postorder traversal using two stacks</a> in the previous post. In this post, an approach with only one stack is discussed.<br><br></div><div>The idea is to move down to leftmost node using left pointer. While moving down, push root and root’s right child to stack. Once we reach leftmost node, print it if it doesn’t have a right child. If it has a right child, then change root so that the right child is processed before.<br><br></div><div>Following is detailed algorithm.<br><br></div><div><br></div><div><br></div><div><br></div><pre>1.1 Create an empty stack\r\n2.1 Do following while root is not NULL\r\n    a) Push root\'s right child and then root to stack.\r\n    b) Set root as root\'s left child.\r\n2.2 Pop an item from stack and set it as root.\r\n    a) If the popped item has a right child and the right child \r\n       is at top of stack, then remove the right child from stack,\r\n       push the root back and set root as root\'s right child.\r\n    b) Else print root\'s data and set root as NULL.\r\n2.3 Repeat steps 2.1 and 2.2 while stack is not empty.</pre><div>Let us consider the following tree<br><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:349,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTree.png&quot;,&quot;width&quot;:638}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/BinaryTree.png\" width=\"638\" height=\"349\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div>Following are the steps to print postorder traversal of the above tree using one stack.<br><br></div><pre>1. Right child of 1 exists. \r\n   Push 3 to stack. Push 1 to stack. Move to left child.\r\n        Stack: 3, 1\r\n\r\n2. Right child of 2 exists. \r\n   Push 5 to stack. Push 2 to stack. Move to left child.\r\n        Stack: 3, 1, 5, 2\r\n\r\n3. Right child of 4 doesn\'t exist. \'\r\n   Push 4 to stack. Move to left child.\r\n        Stack: 3, 1, 5, 2, 4\r\n\r\n4. Current node is NULL. \r\n   Pop 4 from stack. Right child of 4 doesn\'t exist. \r\n   Print 4. Set current node to NULL.\r\n        Stack: 3, 1, 5, 2\r\n\r\n5. Current node is NULL. \r\n    Pop 2 from stack. Since right child of 2 equals stack top element, \r\n    pop 5 from stack. Now push 2 to stack.     \r\n    Move current node to right child of 2 i.e. 5\r\n        Stack: 3, 1, 2\r\n\r\n6. Right child of 5 doesn\'t exist. Push 5 to stack. Move to left child.\r\n        Stack: 3, 1, 2, 5\r\n\r\n7. Current node is NULL. Pop 5 from stack. Right child of 5 doesn\'t exist. \r\n   Print 5. Set current node to NULL.\r\n        Stack: 3, 1, 2\r\n\r\n8. Current node is NULL. Pop 2 from stack. \r\n   Right child of 2 is not equal to stack top element. \r\n   Print 2. Set current node to NULL.\r\n        Stack: 3, 1\r\n\r\n9. Current node is NULL. Pop 1 from stack. \r\n   Since right child of 1 equals stack top element, pop 3 from stack. \r\n   Now push 1 to stack. Move current node to right child of 1 i.e. 3\r\n        Stack: 1\r\n\r\n10. Repeat the same as above steps and Print 6, 7 and 3. \r\n    Pop 1 and Print 1.</pre>', 'storage/posts/1571115772stack.png', 6, 1, '2019-10-14 18:30:00', NULL),
(7, '2019-10-14 23:38:38', '2019-10-14 23:38:38', 'Queue Data Structure', 'A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).', '<div>A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between <a href=\"https://www.geeksforgeeks.org/stack-data-structure/\">stacks </a>and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.<br><br></div><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:272,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/Queue.png&quot;,&quot;width&quot;:741}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/Queue.png\" width=\"741\" height=\"272\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><h1>Applications of Queue Data Structure</h1><div><a href=\"http://en.wikipedia.org/wiki/Queue_%28data_structure%29\">Queue </a>is used when things don’t have to be processed immediately, but have to be processed in <strong>F</strong>irst <strong>I</strong>n <strong>F</strong>irst <strong>O</strong>ut order like <a href=\"http://en.wikipedia.org/wiki/Breadth-first_search\">Breadth First Search</a>. This property of Queue makes it also useful in following kind of scenarios.<br><br></div><div><strong>1)</strong> When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling.<br><strong>2) </strong>When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.<br><br></div><div>See <a href=\"http://introcs.cs.princeton.edu/43stack/\">this </a>for more detailed applications of Queue and Stack.<br><br><br></div><h1>Priority Queue | Set 1 (Introduction)</h1><div>Priority Queue is an extension of <a href=\"http://quiz.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/\">queue </a>with following properties.<br><br></div><ol><li>Every item has a priority associated with it.</li><li>An element with high priority is dequeued before an element with low priority.</li><li>If two elements have the same priority, they are served according to their order in the queue.</li></ol><div>In the below priority queue, element with maximum ASCII value will have the highest priority.<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:512,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/Priority-Queue-min-1024x512.png&quot;,&quot;width&quot;:1024}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/Priority-Queue-min-1024x512.png\" width=\"1024\" height=\"512\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div>A typical priority queue supports following operations.<br><strong>insert(item, priority): </strong>Inserts an item with given priority.<br><strong>getHighestPriority():</strong> Returns the highest priority item.<br><strong>deleteHighestPriority(): </strong>Removes the highest priority item.<br><br></div><div><br></div><div><br></div><div><br></div><div><strong>How to implement priority queue?</strong><br><strong><em>Using Array:</em></strong><em> </em>A simple implementation is to use array of following structure.<br><br></div><pre>struct item {\r\n   int item;\r\n   int priority;\r\n}</pre><div>insert() operation can be implemented by adding an item at end of array in O(1) time.<br><br></div><div>getHighestPriority() operation can be implemented by linearly searching the highest priority item in array. This operation takes O(n) time.<br><br></div><div>deleteHighestPriority() operation can be implemented by first linearly searching an item, then removing the item by moving all subsequent items one position back.<br><br></div><div>We can also use Linked List, time complexity of all operations with linked list remains same as array. The advantage with linked list is deleteHighestPriority() can be more efficient as we don’t have to move items.<br><br></div><div><strong>Using Heaps:</strong><br>Heap is generally preferred for priority queue implementation because heaps provide better performance compared arrays or linked list. In a Binary Heap, getHighestPriority() can be implemented in O(1) time, insert() can be implemented in O(Logn) time and deleteHighestPriority() can also be implemented in O(Logn) time.<br>With <a href=\"http://en.wikipedia.org/wiki/Fibonacci_heap\">Fibonacci heap</a>, insert() and getHighestPriority() can be implemented in O(1) amortized time and deleteHighestPriority() can be implemented in O(Logn) amortized time.<br><br></div><div><strong>Applications of Priority Queue:</strong><br>1) CPU Scheduling<br>2) Graph algorithms like <a href=\"https://www.geeksforgeeks.org/greedy-algorithms-set-7-dijkstras-algorithm-for-adjacency-list-representation/\">Dijkstra’s shortest path algorithm</a>, <a href=\"https://www.geeksforgeeks.org/greedy-algorithms-set-5-prims-mst-for-adjacency-list-representation/\">Prim’s Minimum Spanning Tree</a>, etc<br>3) All <a href=\"https://www.geeksforgeeks.org/applications-of-queue-data-structure/\">queue applications</a> where priority is involved.<br><br></div><div>A priority queue is implemented using Heap. Please refer below articles for our own implementation and library implementations.<br><br></div><ol><li><a href=\"https://www.geeksforgeeks.org/binary-heap/\">Binary Heap (The most common implementation of priority queue)</a></li><li><a href=\"https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/\">Priority Queue in C++</a>.</li><li><a href=\"https://www.geeksforgeeks.org/priority-queue-class-in-java-2/\">Priority Queue in Java.</a></li><li><a href=\"https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python/\">Priority Queue in Python.</a></li><li><a href=\"https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\">Priority Queue in JavaScript.</a></li></ol>', 'storage/posts/1571116118queue.png', 7, 1, '2019-10-14 18:30:00', NULL),
(8, '2019-10-14 23:40:56', '2019-10-14 23:40:56', 'Linked List Data Structure', 'A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations.', '<div>A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers as shown in the below image:<figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:169,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png&quot;,&quot;width&quot;:759}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png\" width=\"759\" height=\"169\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div>In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list.<br>Like arrays, Linked List is a linear data structure. Unlike arrays, linked list elements are not stored at a contiguous location; the elements are linked using pointers.<br><br></div><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:169,&quot;url&quot;:&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png&quot;,&quot;width&quot;:759}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png\" width=\"759\" height=\"169\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div><strong>Why Linked List?</strong><br>Arrays can be used to store linear data of similar types, but arrays have the following limitations.<br><strong>1)</strong> The size of the arrays is fixed: So we must know the upper limit on the number of elements in advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage.<br><strong>2)</strong> Inserting a new element in an array of elements is expensive because the room has to be created for the new elements and to create room existing elements have to be shifted.</div><div><br></div><div>For example, in a system, if we maintain a sorted list of IDs in an array id[].<br><br></div><div>id[] = [1000, 1010, 1050, 2000, 2040].<br><br></div><div>And if we want to insert a new ID 1005, then to maintain the sorted order, we have to move all the elements after 1000 (excluding 1000).<br>Deletion is also expensive with arrays until unless some special techniques are used. For example, to delete 1010 in id[], everything after 1010 has to be moved.<br><br></div><div><strong>Advantages over arrays</strong><br><strong>1)</strong> Dynamic size<br><strong>2)</strong> Ease of insertion/deletion<br><br></div><div><strong>Drawbacks:</strong><br><strong>1)</strong> Random access is not allowed. We have to access elements sequentially starting from the first node. So we cannot do binary search with linked lists efficiently with its default implementation. Read about it <a href=\"https://www.geeksforgeeks.org/binary-search-on-singly-linked-list/\">here</a>.<br><strong>2)</strong> Extra memory space for a pointer is required with each element of the list.<br><strong>3)</strong> Not cache friendly. Since array elements are contiguous locations, there is locality of reference which is not there in case of linked lists.<br><br></div><div><strong>Representation:</strong><br>A linked list is represented by a pointer to the first node of the linked list. The first node is called the head. If the linked list is empty, then the value of the head is NULL.<br>Each node in a list consists of at least two parts:<br>1) data<br>2) Pointer (Or Reference) to the next node<br>In C, we can represent a node using structures. Below is an example of a linked list node with integer data.<br>In Java or C#, LinkedList can be represented as a class and a Node as a separate class. The LinkedList class contains a reference of Node class type.<br><br></div><ul><li>C</li><li>CPP</li><li>Java</li><li>Python</li><li>C#</li></ul><div>filter_none</div>', 'storage/posts/15711162561571049610linkedlist.png', 8, 1, '2019-10-14 18:30:00', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `post_tag`
--

CREATE TABLE `post_tag` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `tag_id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `post_tag`
--

INSERT INTO `post_tag` (`id`, `tag_id`, `post_id`, `created_at`, `updated_at`) VALUES
(1, 1, 1, NULL, NULL),
(2, 2, 1, NULL, NULL),
(3, 2, 2, NULL, NULL),
(4, 3, 2, NULL, NULL),
(5, 1, 3, NULL, NULL),
(6, 3, 3, NULL, NULL),
(7, 1, 4, NULL, NULL),
(8, 3, 4, NULL, NULL),
(9, 2, 4, NULL, NULL),
(10, 7, 1, NULL, NULL),
(11, 1, 5, NULL, NULL),
(12, 2, 5, NULL, NULL),
(13, 3, 5, NULL, NULL),
(14, 4, 5, NULL, NULL),
(15, 6, 5, NULL, NULL),
(16, 7, 5, NULL, NULL),
(17, 1, 6, NULL, NULL),
(18, 2, 6, NULL, NULL),
(19, 3, 6, NULL, NULL),
(20, 4, 6, NULL, NULL),
(21, 6, 6, NULL, NULL),
(22, 7, 6, NULL, NULL),
(23, 1, 7, NULL, NULL),
(24, 2, 7, NULL, NULL),
(25, 3, 7, NULL, NULL),
(26, 4, 7, NULL, NULL),
(27, 6, 7, NULL, NULL),
(28, 7, 7, NULL, NULL),
(29, 1, 8, NULL, NULL),
(30, 2, 8, NULL, NULL),
(31, 3, 8, NULL, NULL),
(32, 4, 8, NULL, NULL),
(33, 6, 8, NULL, NULL),
(34, 7, 8, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `tags`
--

CREATE TABLE `tags` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `details` text COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `tags`
--

INSERT INTO `tags` (`id`, `created_at`, `updated_at`, `name`, `details`) VALUES
(1, '2019-10-14 13:57:44', '2019-10-14 13:57:44', 'Microsoft', 'Bill Gates'),
(2, '2019-10-14 13:57:44', '2019-10-14 13:57:44', 'Google', 'Sundar Pichai'),
(3, '2019-10-14 13:57:44', '2019-10-14 13:57:44', 'Directi', 'Codechef'),
(4, '2019-10-14 19:29:49', '2019-10-14 19:29:49', 'InterviewBit', '<div><strong><br>The standard Lorem Ipsum passage, used since the 1500s<br></strong><br></div><div>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"<br><br></div><div><strong><br>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC<br></strong><br></div><div>\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\"<br><br></div><div><strong><br>1914 translation by H. Rackham<br></strong><br></div><div>\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\"<br><br></div><div><strong><br>Section 1.10.33 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC<br></strong><br></div><div>\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\"<br><br></div><div><strong><br>1914 translation by H. Rackham<br></strong><br></div><div>\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\"<br><br></div>'),
(6, '2019-10-14 21:25:55', '2019-10-14 21:25:55', 'Infosys', '<div><br><strong>Infosys 2019 Recruitment Process for Freshers</strong><br><br></div><div>Infosys recruitment Process for 2019 for all the types for drives conducted the process is same. May it be on campus recruitment process or Off Campus or Referral Drive. We believe that this page will cover all the information that you need to know about the Infosys recruitment process 2019. Read the whole information on this page.<br><br></div><div><strong>Infosys Hiring Process 2019&nbsp; Includes:-<br></strong><br></div><ul><li>Pre-Presentation Talk</li><li>Online Test</li><li>Technical Test</li><li>HR Interview</li></ul><div><strong>SectionsQuestionsTimeNegative Marking</strong>Aptitude | 10 | 25 mins | No<br>Logical | 15 | 35 mins | No<br>English | 40 | 35 mins | No<br>Total | 65 | 95 mins | No</div><div><br></div><div><strong><br>Step 1<br></strong><br></div><div><br>Pre Presentation Talk<br><br></div><div><br></div><div>Firstly, there will be a pre presentation talk where the HR’s of Infosys will talk about various things about Infosys. Mainly about work culture, profiles offered, growth opportunities, salary etc. At the end of pre-presentation talk there will be a Q and A session, where you can ask questions from them.<br><br></div><div>The HR\'s will talk about the following points<br><br></div><ul><li>About Infosys</li><li>Profiles</li><li>Growth Opportunities</li><li>Salary</li><li>Q and A Session</li></ul><div><br></div><div><br></div><div><strong><br>Step 2<br></strong><br></div><div><br>Online Test<br><br></div><div><br></div><div>The online test for infosys is the most difficult test amongst all the service based companies and its very hard. The test has 65 questions and time is 95 mins. The sections are -<br><br></div><div><br></div><div><br>Total<br><br></div><div><br></div><div>Total Number of Questions:&nbsp; 65</div><div>Total Time:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 95 mins<br><br></div><div><br></div><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:35,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Number-of-questions-1.png&quot;,&quot;width&quot;:64}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Number-of-questions-1.png\" width=\"64\" height=\"35\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>Number of Questions:&nbsp; 40<br><br></div><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:64,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Time-sm.png&quot;,&quot;width&quot;:64}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Time-sm.png\" width=\"64\" height=\"64\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>Time: 35 mins<br><br></div><div><strong>Step 3<br></strong><br></div><div><br>Infosys-Quants Recruitment Process<br><br></div><div><br></div><ul><li>Percentages</li><li>Data Interpretation</li><li>Permutation and Combination</li><li>Probability</li><li>Areas, Shapes, Perimeter</li><li>Speed Time and Distance</li><li>Time and Work</li><li>Profit and Loss</li><li>Problem on Ages</li><li>Divisibility</li><li>Number Decimal and Fraction</li></ul><div><br></div><div><a href=\"https://prepinsta.com/infosys-aptitude-questions/\">Infosys Aptitude Questions</a></div><div><br></div><div><strong><br>Step 4<br></strong><br></div><div><br>Infosys-Logical Reasoning Recruitment Process<br><br></div><div><br></div><ul><li>Arrangements</li><li>Syllogisms</li><li>Coding Decoding</li><li>Number series</li><li>Cryptarithmetic</li><li>Clocks and Calendar</li><li>Data Sufficiency</li><li>Most logical choice</li><li>Puzzles</li><li>Logical Deduction</li></ul><div>Some websites say that Logical reasoning is easy section because of you have to answer 15 questions in 35 mins. However, we believe its quiet the opposite, as its very hard which is why each questions takes about 3-5 mins to be solved.Infosys Selection process includes two more Rounds i.e Interviews.<br><br></div><div><br></div><div><a href=\"https://prepinsta.com/infosys-logical-reasoning-questions/\">Infosys Logical Questions</a></div><div><br></div><div><strong><br>Step 5<br></strong><br></div><div><br>Infosys-English Recruitment Process<br><br></div><div><br></div><ul><li>Reading Comprehension</li><li>Fill in the Blanks</li><li>Spotting Error</li><li>Error Correction</li><li>Sentence Correction</li><li>Sentence Selection</li><li>Sentence Completion</li><li>Analogy</li><li>One word Substitution</li></ul><div><br></div><div><a href=\"https://prepinsta.com/infosys-english-verbal-questions/\">Infosys English Questions</a></div><div><br></div><div><strong><br>Step 6<br></strong><br></div><div><br>Interview Round<br><br></div><div><br></div><div>There is only 1 interview rounds for students lasting around 15 to 25 mins and the interviewer will take both technical and HR round together.<br><br></div><div><br></div><div><a href=\"https://prepinsta.com/infosys-interview/\">Infosys Interview Questions</a></div><div><br></div><div><strong><br>Step 7<br></strong><br></div><div><br>Offer Rollout<br><br></div><div><br></div><div>Finally for the selected students offer rollout happens which is sent to your email ID and to your college as well.</div><div><strong><br>Infosys Recruitment Process<br></strong><br></div><div><br></div><div><strong><br>Infosys Recruitment Process Additional Information<br></strong><br></div><div><br></div><div><br>Infosys Selection Process for 2019 freshers is given below and following is the pattern -<br><br></div><ul><li>Online Test</li></ul><div><strong>Infosys Recruitment for 2019Cut OffMost Difficult90th percentile</strong>Logical | 9 | Cryptarithmetic | 13<br>English | 32 | Reading Comprehension | 36<br>Quants | 7 | Speed Time | 9<br>Probability | 0 - 3 | 2 mins | Medium</div><div>Post this if the students clear the test then the following interview rounds are there –<br><br></div><ul><li><strong>Technical Interview</strong></li><li><strong>HR Interview</strong></li></ul><div><br>How is Recruitment Process for Infosys On Campus/Off Campus Going to be for 2019<br><br></div><ul><li>Infosys is likely to begin its <strong>regular placement drives from 1st September 2019</strong> in colleges across India.</li><li>Prior to that, this time <strong>Infosys has planned to conduct off-campus recruitment on specific dates</strong>. This is yet to officially confirmed by Infosys. <strong>But it is likely to happen between July – August</strong>.</li><li>This off-campus drive has <strong>no aptitude questions and is purely technical</strong>.</li><li>Students from <strong>all the department are eligible for this off-campus drive</strong>, given that they have to go through a set of courses and assessments.</li><li>Infosys has rolled out a <strong>new App called “InfyTQ”</strong> which works on Android (iOS – in progress) where students have to enroll/register. Once Registered the students will have to take up a series of courses and assessments planned for each day which consists of Python, DS, and SQL. This course is expected to have about 130 hours of video sessions.</li><li>Also, there will be an assessment every day and it will have both MCQ questions and descriptive questions.</li><li>On completion of the course, students have to select a specific date (chosen from 4 dates provided by Infosys), where an online test will be conducted in the morning session, those who clear the same will be interviewed on the same day.</li></ul>'),
(7, '2019-10-14 21:46:41', '2019-10-14 21:46:41', 'Wipro', '<div><strong><br>Wipro Placement Pattern and Recruitment Process-<br><br>Wipro On Campus Paper<br></strong><br></div><div>There were five sections in the on Campus paper, Quantitative Analysis, Logical Reasoning, Verbal, Technical Quants, and Essay Writing. There were 63 questions in the paper and time allotted was 140 minutes. There was an individual sectional cut off and time limit for every section.<br><strong>Quants -<br></strong>Few important topics :<br><br></div><ul><li>These are the following topics asked in Wipro Papers for Quants Section:<br><br>Total No of Questions: 20 (approx)<br><br>Total Time: 60 mins (combined with Logical and Verbal)<br><br>Topics:<br><br><ul><li><a href=\"https://prepinsta.com/wipro/aptitude/lcm-and-hcf/\">LCM &amp; HCF</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/divisibility/\">Divisibility</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/decimal-fractions/\">Numbers, decimal fractions and power</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/time-work/\">Time &amp; Work</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/pipes-and-cisterns/\">Pipes and Cisterns</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/averages/\">Averages</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/profit-and-loss/\">Profit and Loss</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/simple-and-compound-interest/\">Simple and Compound Interest</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/speed-time-and-distance/\">Time, Speed and Distance</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/inverse/\">Inverse</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/problems-on-trains/\">Problems on Trains</a></li><li><a href=\"https://prepinsta.com/wipro/geometery-coordinate-geometery/\">Geometry, Coordinate Geometry</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/clocks-calendar/\">Clocks &amp; Calendar</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/logarithms/\">Logarithms</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/permutation-and-combinations/\">Permutation and Combinations</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/probability/\">Probability</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/ratio-proportion/\">Ratio &amp; Proportion</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/algebra/\">Algebra</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/surds-indices/\">Surds &amp; Indices</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/allegations-and-mixtures/\">Allegations and Mixtures</a></li><li><a href=\"https://prepinsta.com/wipro/aptitude/problem-on-ages/\">Problem on Ages</a></li></ul></li></ul><div><strong>Verbal section<br></strong>These are the following topics asked in Wipro Papers for Verbal Section:<br><br></div><div>Total No of Questions: 20 (approx)<br><br></div><div>Total Time: 60 mins (Combined with Quants and Logical)<br><br></div><div>Topics:<br><br></div><ul><li><a href=\"https://prepinsta.com/wipro/verbal-english/synonyms/\">Synonyms</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/antonyms/\">Antonyms</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/jumbled-sentence/\">Jumbled Sentence</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/sentence-formation/\">Sentence Formation</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/reading-comprehension/\">Inferential and Literal Comprehension</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/contextual-vocabulary/\">Contextual Vocabulary</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/comprehension-ordering/\">Comprehension ordering</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/error-identification/\">Error Identification</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/wipro-sentence-improvement-construction-questions/\">Sentence Improvement &amp; Construction</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/subject-verb-agreement/\">Subject-Verb Agreement</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/tenses-articles/\">Tenses &amp; Articles</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/preposition-conjunctions/\">Preposition &amp; Conjunctions</a></li><li><a href=\"https://prepinsta.com/wipro/verbal-english/speech-voices/\">Speech &amp; Voices</a></li></ul><div><strong>Logical Reasoning<br></strong>These are the following topics asked in Wipro Papers for Logical Section:<br><br></div><div>Total No of Questions: 20 (approx)<br><br></div><div>Total Time: 60 mins (Combined with Quants and Verbal)<br><br></div><div>Topics<br><br></div><ul><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/coding-deductive/\">Coding deductive logic</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/blood-relations/\">Blood Relation</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/distance-and-direction/\">Directional Sense</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/objective-reasoning/\">Objective Reasoning</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/selection-decision-tables/\">Selection decision tables</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/odd-man-out/\">Odd Man Out</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/statement-conclusion/\">Statement &amp; Conclusion</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/analogy-and-classification/\">Analogy and Classification recognition</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/coding-pattern-and-number-series-pattern-recognition/\">Coding and Number series recognition</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/seating-arrangements/\">Seating Arrangements</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/mathematical-orders/\">Mathematical Orders</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/inferred-meaning/\">Inferred Meaning</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/logical-word-sequence/\">Logical word sequence</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/data-sufficiency/\">Data sufficiency</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/syllogism/\">Syllogism</a></li><li><a href=\"https://prepinsta.com/wipro/logical-reasoning/data-arrangements/\">Data Arrangement</a></li></ul><div><strong>Coding Section<br></strong><br></div><ul><li>In latest Wipro Recruitment Process coding section now contain <strong>2 question</strong>. In Wipro Previous Papers the time for this was 45 mins for both questions but in the latest Wipro Test Pattern the time allotted for this section is <strong>60 mins.<br></strong><br>In Wipro Recruitment Process the coding section can be attempted in the following languages :<br><br><ul><li>C</li><li>C++</li><li>JAVA</li><li>Python</li></ul></li><li>No. of question in latest Wipro Test Pattern = 2 Question<br><br>Time allotted for both the Coding question in Wipro Recruitment Process = 60 mins<br><br>You can choose any of the above mentioned language according to your comfort to write the code in Wipro Placement Process.<br><br></li></ul><div><strong>Essay Writing<br></strong>There was only one question in the Essay writing section and the time allotted was 20 minutes. I had to write an article on Present situation of Agriculture in India compare to ancient days. The word limit for the article was 100- 300 words.<br><br></div><div>The results for the on campus paper were declared within an hour. The list of the shortlisted candidates was displayed on the notice board, luckily my name was on the list. The shortlisted students were asked to report in the college auditorium, for the face to face rounds along with a copy of their updated resume. We were informed that there will be two face to face rounds: Technical and HR.<br><br></div><div><strong><br>Technical Round<br></strong><br></div><div>I entered the auditorium after my name was announced for the interview. As I entered the hall, the interviewer was seated there. He asked for my resume and to take a seat and began asking fundamental questions on C and C++.<br><br></div><ul><li><a href=\"https://prepinsta.com/c-plus-plus-theory/inheritance/\">What is inheritance?</a></li><li>Can you access the private data members?</li><li><a href=\"https://prepinsta.com/c-plus-plus-theory/data-abstraction/\">What is data abstraction?</a></li><li>Explain the logical error in this code (he gave a sample code).</li><li>How do you compile in JAVA?</li></ul><div>The interview went for around 20-30 minutes. I was quite happy with the interview and was hoping a positive result. After all the interviews were over, the list of the shortlisted students for the next round was announced. Fortunately, I was selected for the HR round.<br><br></div><div><strong><br>HR Round<br></strong><br></div><div>The HR round was held after lunch hour in the college auditorium. As I entered the hall, the interviewer was seated there. He asked me basic questions related to my hobbies, interests, and family background.<br><br></div><div>HR: Introduce yourself.<br><br></div><div>Me: I briefly introduced myself, my parents, their occupation, and my educational and creative interests.<br><br></div><div>HR: Why do you want to be a part of Wipro?<br><br></div><div>Me: Answered confidently, highlighting the strengths of the company.<br><br></div><div>HR: Do you have any plans for masters like MBA or MTech?<br><br></div><div>Me: No sir. I don’t want to go in the management sector.<br><br></div><div>HR: Where do you see yourself in next five years?<br><br></div><div>Me: Shared my long-term goals.<br><br></div><div>HR: Are you fine with relocation?<br><br></div><div>Me: Yes sir.<br><br></div><div>HR: Okay Ananya. You may wait outside we will let you know about the results soon.<br><br></div><div>Me: Thank you sir.<br><br></div><div>The results were announced after an hour and I was selected. That was the best day of my life. The offer letter was handed there only. After two months the joining letter came, I was selected as the JAVA Developer at Wipro Pvt. Ltd.<br><br><br><br></div><div><strong><br></strong><br></div><div><strong><br></strong><br></div>'),
(8, '2019-10-14 22:13:09', '2019-10-14 22:13:09', 'Capgemini', '<div><br><strong>Capgemini Latest Curriculum 2019</strong><br><br></div><div><strong>All Branches</strong> – English Essay + Analytical Reasoning + Numerical Reasoning<br><br></div><ul><li><strong>Ques</strong> – 16 each in Logical and Quants 1 Ques for WET and 20 Ques for Pseudo Code</li><li><strong>Total Time</strong> – 50 mins + 30 mins(WET) –</li></ul><div><strong>Written English Test (WET) – </strong>Essay type question. I need to write an article in 30 mins.<br><br></div><div><strong>Branch Specific(Not for this year, used be earlier)</strong> – English Usage + Analytical Reasoning + Numerical Reasoning + Domain Module (20 min)<br><br></div><ul><li><strong>Ques</strong> – 15 each/20 for Domain Module</li><li><strong>Total time</strong> – 45 mins+ 25 mins(WET) +20 mins (Domain Module)</li></ul><div><br></div><div>&nbsp; &nbsp; &nbsp; <figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:256,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-previous-year-placement-paper-with-solutions.png&quot;,&quot;width&quot;:256}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-previous-year-placement-paper-with-solutions.png\" width=\"256\" height=\"256\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div><br>Capgemini Quantitative Questions with Solutions 2019<br><br></div><ul><li><a href=\"https://prepinsta.com/capgemini/aptitude/profit-loss/\">Profit &amp; Loss</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/ratios-proportion/\">Ratio’s &amp; Proportion</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/averages/\">Averages</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/geometry-trigonometry/\">Geometry &amp; Trigonometry</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/data-interpretation/\">Data Interpretation</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/speed-distance/\">Speed &amp; Distance</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/algebra/\">Algebra</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/series-and-progression/\">Series &amp;Progression</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/mensuration/\">Mensuration</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/logarithms/\">Logarithms</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/simple-and-compound-interest/\">Simple and Compound Interest</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/mixtures-and-allegations/\">Mixture and Allegations</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/divisibility/\">Divisibility</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/lcm-and-hcf/\">HCF and LCM</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/areas/\">Areas</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/numbers-relations-and-functions/\">Numbers, Relations, and Functions</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/pipes-and-cisterns/\">Pipes and Cisterns</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/time-and-work/\">Time and Work</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/probability/\">Probability</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/percentage/\">Percentage</a></li></ul><div><strong><br>Fact About these sections<br></strong><br></div><ul><li><strong>Difficulty Level:</strong> Med-High</li><li><strong>Importance:</strong> Medium</li><li><strong>Suggested time to solve:</strong> 40secs - 1 - 10secsmin each</li></ul><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:256,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper-with-solutions.png&quot;,&quot;width&quot;:256}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper-with-solutions.png\" width=\"256\" height=\"256\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div><br>Capgemini Questions on Logical Ability and Analytical Reasoning<br><br></div><ul><li><a href=\"https://prepinsta.com/capgemini/logical/attention-to-details/\">Attention to Details</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/flowcharts/\">Flowcharts – Visual reasoning</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/blood-relations/\">Relationship(Blood Relations)</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/logical-reasoning/\">Logical Reasoning</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/statement-conclusions/\">Statement &amp; Conclusions</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/seating-arrangements/\">Seating Arrangements</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/coding-decoding/\">Coding-Decoding</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/logical-word-sequence/\">Logical Word Sequence</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/agree-disagree-psychometric/\">Agree on Disagree-Psychometric</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/directional-sense/\">Directional sense</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/analogies/\">Analogies</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/problem-on-ages/\">Problem on ages</a></li></ul><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:250,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-placement-paper-with-recent-answers.png&quot;,&quot;width&quot;:250}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-placement-paper-with-recent-answers.png\" width=\"250\" height=\"250\"><figcaption class=\"attachment__caption\"></figcaption></figure><br><br></div><div><strong>Essay Writing<br></strong><br></div><ul><li><strong>Time –</strong> 30 mins</li><li><strong>Number of Questions –</strong> 1</li></ul>'),
(9, '2019-10-14 22:17:42', '2019-10-14 22:17:42', 'HCL', '<div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:250,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper.png&quot;,&quot;width&quot;:250}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper.png\" width=\"250\" height=\"250\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div><br></div><div><strong>All Branches</strong> – English Essay + Analytical Reasoning + Numerical Reasoning<br><br></div><ul><li><strong>Ques</strong> – 16 each in Logical and Quants 1 Ques for WET and 20 Ques for Pseudo Code</li><li><strong>Total Time</strong> – 50 mins + 30 mins(WET) –</li></ul><div><strong>Written English Test (WET) – </strong>Essay type question. I need to write an article in 30 mins.<br><br></div><div><strong>Branch Specific(Not for this year, used be earlier)</strong> – English Usage + Analytical Reasoning + Numerical Reasoning + Domain Module (20 min)<br><br></div><ul><li><strong>Ques</strong> – 15 each/20 for Domain Module</li><li><strong>Total time</strong> – 45 mins+ 25 mins(WET) +20 mins (Domain Module)</li></ul><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:256,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-previous-year-placement-paper-with-solutions.png&quot;,&quot;width&quot;:256}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-previous-year-placement-paper-with-solutions.png\" width=\"256\" height=\"256\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>Capgemini Quantitative Questions with Solutions 2019<br><br></div><ul><li><a href=\"https://prepinsta.com/capgemini/aptitude/profit-loss/\">Profit &amp; Loss</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/ratios-proportion/\">Ratio’s &amp; Proportion</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/averages/\">Averages</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/geometry-trigonometry/\">Geometry &amp; Trigonometry</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/data-interpretation/\">Data Interpretation</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/speed-distance/\">Speed &amp; Distance</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/algebra/\">Algebra</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/series-and-progression/\">Series &amp;Progression</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/mensuration/\">Mensuration</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/logarithms/\">Logarithms</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/simple-and-compound-interest/\">Simple and Compound Interest</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/mixtures-and-allegations/\">Mixture and Allegations</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/divisibility/\">Divisibility</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/lcm-and-hcf/\">HCF and LCM</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/areas/\">Areas</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/numbers-relations-and-functions/\">Numbers, Relations, and Functions</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/pipes-and-cisterns/\">Pipes and Cisterns</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/time-and-work/\">Time and Work</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/probability/\">Probability</a></li><li><a href=\"https://prepinsta.com/capgemini/aptitude/percentage/\">Percentage</a></li></ul><div><strong><br>Fact About these sections<br></strong><br></div><ul><li><strong>Difficulty Level:</strong> Med-High</li><li><strong>Importance:</strong> Medium</li><li><strong>Suggested time to solve:</strong> 40secs - 1 - 10secsmin each</li></ul><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:256,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper-with-solutions.png&quot;,&quot;width&quot;:256}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/capgemini-recent-placement-paper-with-solutions.png\" width=\"256\" height=\"256\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>Capgemini Questions on Logical Ability and Analytical Reasoning<br><br></div><ul><li><a href=\"https://prepinsta.com/capgemini/logical/attention-to-details/\">Attention to Details</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/flowcharts/\">Flowcharts – Visual reasoning</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/blood-relations/\">Relationship(Blood Relations)</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/logical-reasoning/\">Logical Reasoning</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/statement-conclusions/\">Statement &amp; Conclusions</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/seating-arrangements/\">Seating Arrangements</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/coding-decoding/\">Coding-Decoding</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/logical-word-sequence/\">Logical Word Sequence</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/agree-disagree-psychometric/\">Agree on Disagree-Psychometric</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/directional-sense/\">Directional sense</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/analogies/\">Analogies</a></li><li><a href=\"https://prepinsta.com/capgemini/logical/problem-on-ages/\">Problem on ages</a></li><li><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:64,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/persistent-technical-syllabus-3.png&quot;,&quot;width&quot;:55}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/persistent-technical-syllabus-3.png\" width=\"55\" height=\"64\"><figcaption class=\"attachment__caption\"></figcaption></figure>Pseudo Code Test</li></ul><div><figure data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:250,&quot;url&quot;:&quot;https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-placement-paper-with-recent-answers.png&quot;,&quot;width&quot;:250}\" data-trix-content-type=\"image\" class=\"attachment attachment--preview\"><img src=\"https://mk0prepinstahrvgr90n.kinstacdn.com/wp-content/uploads/2019/06/Capgemini-placement-paper-with-recent-answers.png\" width=\"250\" height=\"250\"><figcaption class=\"attachment__caption\"></figcaption></figure></div><div>This section<strong> </strong>checked the English competency. The topics given for this round were usually technology related or based on general topics.<br><br></div><div><strong>Essay Writing<br></strong><br></div><ul><li><strong>Time –</strong> 30 mins</li><li><strong>Number of Questions –</strong> 1</li></ul>');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `role` enum('writer','admin') COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'writer',
  `about` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `role`, `about`, `email_verified_at`, `password`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'Kanak goel', 'kanakgoel36@gmail.com', 'admin', NULL, NULL, '$2y$10$3YP0Ree2qezHHkdPqrOCTejIYfy69FkMncY0AzSR1Hi6qmKdLD7U.', NULL, '2019-10-14 13:57:43', '2019-10-14 13:57:43'),
(2, 'Kanak', 'kanakgoel36gmail.com', 'writer', NULL, NULL, '$2y$10$mA5Y4UyBBm0gaH8JQt7BFe8B8xu37XDpAN9WCcVchTy3nsjHHsviW', NULL, '2019-10-14 13:57:43', '2019-10-14 13:57:43'),
(3, 'Kanak', 'kanakgoel37gmail.com', 'writer', NULL, NULL, '$2y$10$wEaFhhzAn08.ucSU4D44Z.3Wkp.FmBd5jUTzg2TpqMXlDeZEobUWS', NULL, '2019-10-14 13:57:43', '2019-10-14 13:57:43'),
(4, 'harshgoel', 'goel@gmail.com', 'writer', NULL, NULL, '$2y$10$iOSYGrWvoDb5HB34cD3h6OpKZlHhAyw8BOKG3QSXZjdZILFO79DBu', NULL, '2019-10-15 00:41:16', '2019-10-15 00:41:16');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post_tag`
--
ALTER TABLE `post_tag`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=57;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `post_tag`
--
ALTER TABLE `post_tag`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;

--
-- AUTO_INCREMENT for table `tags`
--
ALTER TABLE `tags`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
